/*
 This is automatically
 generated...do not edit!
*/
"/*\n"
"MIT License\n"
"\n"
"Cosi (Javascript Native Runtime)\n"
"\n"
"Copyright (c) 2017 Sebastian Garth\n"
"\n"
"Permission is hereby granted, free of charge, to any person obtaining a copy\n"
"of this software and associated documentation files (the \"Software\"), to deal\n"
"in the Software without restriction, including without limitation the rights\n"
"to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
"copies of the Software, and to permit persons to whom the Software is\n"
"furnished to do so, subject to the following conditions:\n"
"\n"
"The above copyright notice and this permission notice shall be included in all\n"
"copies or substantial portions of the Software.\n"
"\n"
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
"FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n"
"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n"
"OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
"SOFTWARE.\n"
"*/\n"
"\n"
"/*\n"
" Imports\n"
"*/\n"
"var imports = {}\n"
"\n"
"/*\n"
" Utilities\n"
"*/\n"
"\n"
"function through(action)\n"
"{\n"
" return (action instanceof Function) ?\n"
"  action : action ? \n"
"   function(){ return action } :\n"
"   function(value){ return value }\n"
"}\n"
"\n"
"function egress(exception)\n"
"{ \n"
" if(exception)\n"
"  throw exception\n"
" if(!(this instanceof egress))\n"
"  egress(new egress()) \n"
"}\n"
"\n"
"function verify(object, exception)\n"
"{\n"
" if(!object)\n"
"  egress(exception)\n"
"}\n"
"\n"
"function fail(condition, exception)\n"
"{\n"
" verify(!condition, exception) \n"
"}\n"
"\n"
"function caught(routine, handler)\n"
"{\n"
" try\n"
" {\n"
"  routine()\n"
"  return undefined\n"
" }\n"
" catch(error)\n"
" {\n"
"  through(handler)(error)\n"
"  return error\n"
" }\n"
"}\n"
"\n"
"function contain(routine, handler)\n"
"{\n"
" var \n"
"  exception = caught(routine, handler)\n"
" if(exception)\n"
"  print(\"Error:\", exception)\n"
" return exception\n"
"}\n"
"\n"
"function escape(routine, handler)\n"
"{\n"
" try\n"
" {\n"
"  routine()\n"
"  return false\n"
" }\n"
" catch(exception)\n"
" {\n"
"  if(exception instanceof egress)\n"
"   return true\n"
"  through(handler)(exception)\n"
"  egress(exception) \n"
" }\n"
"}\n"
"\n"
"function loop(control, action)\n"
"{\n"
" var\n"
"  result, \n"
"  count = control.length || control.end || \n"
"   control.finish || control || 0,\n"
"  start = control.begin || control.start || 0\n"
" escape(function(){\n"
"  for(var idx = start; idx < count; ++idx)\n"
"  {\n"
"   result = action(idx, control)\n"
"   if(result !== undefined)\n"
"    break\n"
"  }\n"
" })\n"
" return result\n"
"}\n"
"\n"
"/*\n"
" Common conversions\n"
"*/\n"
"function file_to_bytes(source)\n"
"{\n"
" var \n"
"  fp = NULL,\n"
"  length = 0,\n"
"  data = NULL,\n"
"  packed = source.file,\n"
"  file = packed || source,\n"
"  error = caught(function(){ \n"
"   fp = fopen(file, 'rb')\n"
"   verify(fp)\n"
"   fseek(fp, 0, SEEK_END)\n"
"   length = ftell(fp)\n"
"   rewind(fp)\n"
"   data = malloc(length + 1)\n"
"   verify(data)\n"
"   verify(length == fread(data, 1, length, fp))\n"
"   set_byte(data, length, 0)\n"
"   if(packed)\n"
"   { \n"
"    source.length = length\n"
"    source.bytes = data\n"
"    data = source\n"
"   }\n"
"  })\n"
" if(error)\n"
" {\n"
"  free(data)\n"
"  data = NULL\n"
" }\n"
" if(fp)\n"
"  fclose(fp)\n"
" return data\n"
"}\n"
"\n"
"function bytes_to_file(bytes, file, len)\n"
"{\n"
" if(bytes == NULL)\n"
"  return false\n"
" var out = file\n"
" if(!(file > 0))\n"
"  out = fopen(file, 'wb+')\n"
" if(!len)\n"
"  len = strlen(bytes)\n"
" var pass = false\n"
" if(out)\n"
" {\n"
"  if(fwrite(bytes, 1, len, out) == len)\n"
"   pass = true\n"
"  fclose(out)\n"
" }\n"
" return pass\n"
"}\n"
"\n"
"function file_to_text(file)\n"
"{\n"
" var source = file_to_bytes({ file : file })\n"
" if(source == NULL)\n"
"  return null\n"
" var \n"
"  bytes = source.bytes,\n"
"  result = bytes_to_text(bytes, source.length)\n"
" free(bytes)\n"
" return result\n"
"}\n"
"\n"
"function text_to_file(text, file)\n"
"{\n"
" var data = text_to_bytes(text)\n"
" var pass = bytes_to_file(data, file, text.length)\n"
" free(data)\n"
" return pass\n"
"}\n"
"\n"
"/*\n"
" Conversions to Javascript objects\n"
"*/\n"
"function text_to_function(script, imports)\n"
"{\n"
" var result = null\n"
" escape(function(){\n"
"  var bundled = 'return function(){' + script + '}'\n"
"  var invoke = new Function('imports', bundled)\n"
"  result = invoke(imports)\n"
" })\n"
" return result\n"
"}\n"
"\n"
"function text_to_task(script, imports)\n"
"{\n"
" var loaded = text_to_function(script, imports);\n"
" if(loaded)\n"
"  loaded()\n"
" else\n"
"  return false\n"
" return true\n"
"}\n"
"\n"
"function text_to_module(script, imports)\n"
"{\n"
" var loaded = text_to_function(script, imports);\n"
" return loaded ? loaded() : null\n"
"}\n"
"\n"
"function text_to_object(script, imports)\n"
"{\n"
" return text_to_module('return ' + script, imports)\n"
"}\n"
"\n"
"function file_to_function(script, imports)\n"
"{\n"
" return text_to_function(file_to_text(file), imports)\n"
"}\n"
"\n"
"function file_to_task(file, imports)\n"
"{\n"
" return text_to_task(file_to_text(file), imports)\n"
"}\n"
"\n"
"function file_to_module(file, imports)\n"
"{\n"
" return text_to_module(file_to_text(file), imports)\n"
"}\n"
"\n"
"function file_to_object(file)\n"
"{\n"
" return text_to_object(file_to_text(file), imports)\n"
"}\n"
"\n"
"/*\n"
" Input and output\n"
"*/\n"
"function print_partial()\n"
"{\n"
" var args = arguments\n"
" loop(args, function(index){\n"
"  if(index != 0)\n"
"   put(' ')\n"
"  var arg = args[index];\n"
"  if(arg === null)\n"
"   arg = '(null)'\n"
"  else if(arg === undefined)\n"
"   arg = '(undefined)'\n"
"  put(arg.toString())\n"
" })\n"
"}\n"
"\n"
"function print()\n"
"{\n"
" print_partial.apply(null, arguments)\n"
" putchar(0xa)\n"
"}\n"
"\n"
"function gets_bytes(stream)\n"
"{\n"
" var sum = 0\n"
" var size = 64\n"
" var data = NULL\n"
" var newline = 0xa\n"
" if(!stream)\n"
"  stream = stdin\n"
" for(;;)\n"
" {\n"
"  var max = size\n"
"  size *= 2\n"
"  var block = realloc(data, size + 1)\n"
"  if(block == NULL)\n"
"  {\n"
"   free(data)\n"
"   return NULL\n"
"  }\n"
"  data = block\n"
"  var line = data + sum\n"
"  if(!fgets(line, max, stream))\n"
"   break\n"
"  var length = strlen(line)\n"
"  var last = length - 1 \n"
"  if(get_byte(line, last) == newline) \n"
"   set_byte(line, last--, 0)\n"
"  sum += last + 1\n"
"  if(length != max)\n"
"   break\n"
" }\n"
" if(sum == 0)\n"
" {\n"
"  free(data)\n"
"  return NULL \n"
" }\n"
" return data  \n"
"}\n"
"\n"
"function gets_text(stream)\n"
"{\n"
" var bytes = gets_bytes(stream)\n"
" var text = bytes ? bytes_to_text(bytes) : null\n"
" free(bytes)\n"
" return text\n"
"} \n"
"\n"
"function prompt()\n"
"{\n"
" print_partial.apply(null, arguments)\n"
" put(' ')\n"
" return gets_text()\n"
"}\n"
"\n"
"function text_to_ascii(text)\n"
"{\n"
" var chars = [] \n"
" var data = text_to_bytes(text)\n"
" loop(strlen(data), function(index){ \n"
"  chars.push(get_byte(data, index)) \n"
" })\n"
" free(data)\n"
" return chars\n"
"}\n"
"\n"
"function ascii_to_text(ascii)\n"
"{\n"
" var bytes = malloc(ascii.length + 1)\n"
" set_byte(bytes, ascii.length, 0)\n"
" loop(ascii, function(counter){\n"
"  set_byte(bytes, counter, ascii[counter])\n"
" })\n"
" var text = bytes_to_text(bytes)\n"
" free(bytes)\n"
" return text\n"
"}\n"
"\n"
"function to_text_array(args, skip)\n"
"{\n"
" var tab = []\n"
" var align = sizeof('void*')\n"
" if(skip)\n"
"  args += align\n"
" for(;;)\n"
" {\n"
"  var ptr = get_memory(args)\n"
"  if(ptr == NULL)\n"
"   break\n"
"  tab.push(bytes_to_text(ptr))\n"
"  args += align\n"
" }\n"
" return tab\n"
"}\n"
"\n"
"function argv_to_text_array(skip)\n"
"{\n"
" if(skip === undefined)\n"
"  skip = true\n"
" return to_text_array(argv(), skip)\n"
"}\n"
"\n"
"function script_path()\n"
"{\n"
" return bytes_to_text(get_memory(argv()))\n"
"}\n"
/*
 That was automatically
 generated...do not edit!
*/
