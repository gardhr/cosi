/* Tue Dec 17 12:01:01 2019 */
/* cosi.js */
" /* \n "
" MIT License \n "
"  \n "
" Cosi (Javascript Native Runtime) \n "
"  \n "
" Copyright (c) 2019 Sebastian Garth \n "
"  \n "
" Permission is hereby granted, free of charge, to any person obtaining a copy \n "
" of this software and associated documentation files (the \"Software\"), to deal \n "
" in the Software without restriction, including without limitation the rights \n "
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n "
" copies of the Software, and to permit persons to whom the Software is \n "
" furnished to do so, subject to the following conditions: \n "
"  \n "
" The above copyright notice and this permission notice shall be included in all \n "
" copies or substantial portions of the Software. \n "
"  \n "
" THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n "
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n "
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n "
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n "
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n "
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n "
" SOFTWARE. \n "
" */ \n "
"  \n "
" var args = script_arguments(false) \n "
" if(args.length == 0) \n "
" { \n "
"  print(\"Cosi Native Runtime for Javascript\") \n "
"  var cosi = bytes_to_text(get_memory(argv(), -1)) \n "
"  print(\"Usage:\", cosi, \"script-name script-arg0 ...\") \n "
"  print(\"Interactive mode: waiting for input...\") \n "
"  var script = \"\" \n "
"  while(true) \n "
"  { \n "
"   try \n "
"   {   \n "
"    var line = read_line() \n "
" /* \n "
"  Accumulate  \n "
" */ \n "
"    script += line    \n "
"    var result = eval(script) \n "
" /* \n "
"  If we got this far we can go ahead and reset  \n "
" */ \n "
"    script = \"\" \n "
"    if(result !== undefined) \n "
"     print(result) \n "
"   } \n "
"   catch(error) \n "
"   { \n "
"    var message = error.toString() \n "
"    if(message.search(\"end-of-file\") >= 0) \n "
"     continue \n "
"    print(\"Error:\", message) \n "
"    if(error.stackTrace)    print(error.stackTrace) \n "
" /* \n "
"  Reset on error  \n "
" */ \n "
"    script = \"\" \n "
"   } \n "
"  } \n "
" } \n "
" else  \n "
" { \n "
"  var file = args[0] \n "
"  if(!file_to_task(file)) \n "
"   if(!file_to_task(file + '.js')) \n "
"    throw Error('cannot load file ' + file) \n "
" } \n "
